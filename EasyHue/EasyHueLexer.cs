//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EasyHue.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class EasyHueLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, INT=35, STRING=36, ID=37, WS=38;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "INT", "STRING", "ID", "WS"
	};


	public EasyHueLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EasyHueLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'FUNCTION'", "'('", "')'", "'='", "';'", "'EASYHUE'", "'GETLIGHTS'", 
		"'GETID'", "'UPDATE'", "'TURNON'", "'TURNOFF'", "'COLOR'", "'BRIGHTNESS'", 
		"'RESULT'", "','", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", 
		"'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'IF'", "'ELSE'", "'WHILE'", 
		"'{'", "'}'", "'RETURN'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "INT", 
		"STRING", "ID", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EasyHue.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static EasyHueLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,38,249,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
		2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
		8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,
		15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
		21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,
		27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,
		30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		34,4,34,225,8,34,11,34,12,34,226,1,35,1,35,5,35,231,8,35,10,35,12,35,234,
		9,35,1,35,1,35,1,36,4,36,239,8,36,11,36,12,36,240,1,37,4,37,244,8,37,11,
		37,12,37,245,1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
		19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
		43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
		67,34,69,35,71,36,73,37,75,38,1,0,4,1,0,48,57,1,0,34,34,2,0,65,90,97,122,
		3,0,9,10,13,13,32,32,252,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,1,77,1,0,0,0,3,86,1,0,0,0,5,88,1,0,0,0,7,90,1,0,0,0,9,92,
		1,0,0,0,11,94,1,0,0,0,13,102,1,0,0,0,15,112,1,0,0,0,17,118,1,0,0,0,19,
		125,1,0,0,0,21,132,1,0,0,0,23,140,1,0,0,0,25,146,1,0,0,0,27,157,1,0,0,
		0,29,164,1,0,0,0,31,166,1,0,0,0,33,168,1,0,0,0,35,170,1,0,0,0,37,172,1,
		0,0,0,39,174,1,0,0,0,41,176,1,0,0,0,43,179,1,0,0,0,45,182,1,0,0,0,47,184,
		1,0,0,0,49,186,1,0,0,0,51,189,1,0,0,0,53,192,1,0,0,0,55,195,1,0,0,0,57,
		198,1,0,0,0,59,201,1,0,0,0,61,206,1,0,0,0,63,212,1,0,0,0,65,214,1,0,0,
		0,67,216,1,0,0,0,69,224,1,0,0,0,71,228,1,0,0,0,73,238,1,0,0,0,75,243,1,
		0,0,0,77,78,5,70,0,0,78,79,5,85,0,0,79,80,5,78,0,0,80,81,5,67,0,0,81,82,
		5,84,0,0,82,83,5,73,0,0,83,84,5,79,0,0,84,85,5,78,0,0,85,2,1,0,0,0,86,
		87,5,40,0,0,87,4,1,0,0,0,88,89,5,41,0,0,89,6,1,0,0,0,90,91,5,61,0,0,91,
		8,1,0,0,0,92,93,5,59,0,0,93,10,1,0,0,0,94,95,5,69,0,0,95,96,5,65,0,0,96,
		97,5,83,0,0,97,98,5,89,0,0,98,99,5,72,0,0,99,100,5,85,0,0,100,101,5,69,
		0,0,101,12,1,0,0,0,102,103,5,71,0,0,103,104,5,69,0,0,104,105,5,84,0,0,
		105,106,5,76,0,0,106,107,5,73,0,0,107,108,5,71,0,0,108,109,5,72,0,0,109,
		110,5,84,0,0,110,111,5,83,0,0,111,14,1,0,0,0,112,113,5,71,0,0,113,114,
		5,69,0,0,114,115,5,84,0,0,115,116,5,73,0,0,116,117,5,68,0,0,117,16,1,0,
		0,0,118,119,5,85,0,0,119,120,5,80,0,0,120,121,5,68,0,0,121,122,5,65,0,
		0,122,123,5,84,0,0,123,124,5,69,0,0,124,18,1,0,0,0,125,126,5,84,0,0,126,
		127,5,85,0,0,127,128,5,82,0,0,128,129,5,78,0,0,129,130,5,79,0,0,130,131,
		5,78,0,0,131,20,1,0,0,0,132,133,5,84,0,0,133,134,5,85,0,0,134,135,5,82,
		0,0,135,136,5,78,0,0,136,137,5,79,0,0,137,138,5,70,0,0,138,139,5,70,0,
		0,139,22,1,0,0,0,140,141,5,67,0,0,141,142,5,79,0,0,142,143,5,76,0,0,143,
		144,5,79,0,0,144,145,5,82,0,0,145,24,1,0,0,0,146,147,5,66,0,0,147,148,
		5,82,0,0,148,149,5,73,0,0,149,150,5,71,0,0,150,151,5,72,0,0,151,152,5,
		84,0,0,152,153,5,78,0,0,153,154,5,69,0,0,154,155,5,83,0,0,155,156,5,83,
		0,0,156,26,1,0,0,0,157,158,5,82,0,0,158,159,5,69,0,0,159,160,5,83,0,0,
		160,161,5,85,0,0,161,162,5,76,0,0,162,163,5,84,0,0,163,28,1,0,0,0,164,
		165,5,44,0,0,165,30,1,0,0,0,166,167,5,43,0,0,167,32,1,0,0,0,168,169,5,
		45,0,0,169,34,1,0,0,0,170,171,5,42,0,0,171,36,1,0,0,0,172,173,5,47,0,0,
		173,38,1,0,0,0,174,175,5,37,0,0,175,40,1,0,0,0,176,177,5,61,0,0,177,178,
		5,61,0,0,178,42,1,0,0,0,179,180,5,33,0,0,180,181,5,61,0,0,181,44,1,0,0,
		0,182,183,5,60,0,0,183,46,1,0,0,0,184,185,5,62,0,0,185,48,1,0,0,0,186,
		187,5,60,0,0,187,188,5,61,0,0,188,50,1,0,0,0,189,190,5,62,0,0,190,191,
		5,61,0,0,191,52,1,0,0,0,192,193,5,38,0,0,193,194,5,38,0,0,194,54,1,0,0,
		0,195,196,5,124,0,0,196,197,5,124,0,0,197,56,1,0,0,0,198,199,5,73,0,0,
		199,200,5,70,0,0,200,58,1,0,0,0,201,202,5,69,0,0,202,203,5,76,0,0,203,
		204,5,83,0,0,204,205,5,69,0,0,205,60,1,0,0,0,206,207,5,87,0,0,207,208,
		5,72,0,0,208,209,5,73,0,0,209,210,5,76,0,0,210,211,5,69,0,0,211,62,1,0,
		0,0,212,213,5,123,0,0,213,64,1,0,0,0,214,215,5,125,0,0,215,66,1,0,0,0,
		216,217,5,82,0,0,217,218,5,69,0,0,218,219,5,84,0,0,219,220,5,85,0,0,220,
		221,5,82,0,0,221,222,5,78,0,0,222,68,1,0,0,0,223,225,7,0,0,0,224,223,1,
		0,0,0,225,226,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,70,1,0,0,0,228,
		232,5,34,0,0,229,231,8,1,0,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,1,
		0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,236,5,34,0,0,
		236,72,1,0,0,0,237,239,7,2,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,
		1,0,0,0,240,241,1,0,0,0,241,74,1,0,0,0,242,244,7,3,0,0,243,242,1,0,0,0,
		244,245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,248,
		6,37,0,0,248,76,1,0,0,0,5,0,226,232,240,245,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
